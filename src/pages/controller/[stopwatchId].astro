---
import BaseLayout from '../../layouts/BaseLayout.astro';
import '../../styles/controller.css';

const { stopwatchId } = Astro.params;
---

<BaseLayout>
	<div class='controller'>
		<h1 class='title'>Télécommande</h1>
		<form id='start-stopwatch' data-stopwatch-id={stopwatchId}>
			<div class='checkbox-container'>
				<input type='checkbox' id='two-waves' class='checkbox-input' />
				<span class='checkbox'></span>
				<label for='two-waves' class='label'>Deux vagues (AB/CD) ?</label>
			</div>
			<div>
				<label for='time' class='label'>Temps</label>
				<input type='number' id='time' step='10' min='10' required class='input' />
			</div>
			<button id='start-stopwatch-button' class='button' style='height: 96px;'>
				Commencer le chronomètre
			</button>
		</form>
		<div id='stop-stopwatch-container'>
			<button id='stop-stopwatch' class='button'>Stopper le chronomètre</button>
		</div>
	</div>
</BaseLayout>

<script>
	import { io } from 'socket.io-client';

	const startStopwatchForm = document.getElementById('start-stopwatch') as HTMLFormElement;
	const stopStopwatchButton = document.getElementById('stop-stopwatch') as HTMLButtonElement;
	const stopStopwatchContainer = document.getElementById(
		'stop-stopwatch-container'
	) as HTMLDivElement;

	const startStopwatchButton = document.getElementById(
		'start-stopwatch-button'
	) as HTMLButtonElement;

	const twoWavesInput = document.getElementById('two-waves') as HTMLInputElement;
	const timeInput = document.getElementById('time') as HTMLInputElement;

	const socket = io(import.meta.env.PUBLIC_WEBSOCKET_SERVER);
	const stopwatchId = startStopwatchForm.dataset.stopwatchId;

	stopStopwatchContainer.hidden = true;

	socket.on('connect', () => {
		socket.emit('controller-connected', stopwatchId);
	});

	startStopwatchForm.addEventListener('submit', (event) => {
		event.preventDefault();
		socket.emit('start-stopwatch', stopwatchId, twoWavesInput.checked, timeInput.value);
		startStopwatchButton.disabled = true;
	});

	socket.on('stopwatch-started', (startingStopwatchId: string) => {
		if (startingStopwatchId === stopwatchId) {
			startStopwatchButton.disabled = false;
			startStopwatchForm.hidden = true;
			stopStopwatchContainer.hidden = false;
		}
	});

	stopStopwatchButton.addEventListener('click', () => {
		socket.emit('stop-stopwatch', stopwatchId);
		stopStopwatchButton.disabled = true;
	});

	socket.on('stopwatch-stopped', (stoppingStopwatchId: string, waveTwoRunning: boolean) => {
		if (stoppingStopwatchId === stopwatchId) {
			stopStopwatchButton.disabled = false;

			if (!waveTwoRunning) {
				stopStopwatchContainer.hidden = true;
				startStopwatchForm.hidden = false;
			}
		}
	});
</script>
