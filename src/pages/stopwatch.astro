---
import BaseLayout from '../layouts/BaseLayout.astro';
import '../styles/stopwatch.css';
---

<BaseLayout>
	<div id='stopwatch'>
		<h1 id='title'>Chronom√®tre</h1>
		<div id='stopwatch-id'></div>
		<canvas id='qrcode'></canvas>
		<div id='time'>-</div>
		<div id='wave'></div>
	</div>
</BaseLayout>

<script>
	import { io } from 'socket.io-client';
	import { toCanvas } from 'qrcode';

	function startStopwatch(time: number, twoWaves: boolean): void {
		waveDiv.innerText = twoWaves ? startingWave : '';
		isTwoWaves = twoWaves;

		countdownTime = time;
		stopwatchContainer.className = 'red';

		whistleSound.play();
		let whistleSoundPlayed: number = 1;
		whistleSound.addEventListener('ended', () => {
			if (whistleSoundPlayed === 1) {
				whistleSound.play();
				whistleSoundPlayed++;
			}
		});

		countdown('time', 10, () => {
			stopwatchContainer.className = 'green';
			whistleSound.play();
			countdown('time', countdownTime, stopStopwatch);
		});
	}

	function stopStopwatch(): void {
		stopwatchContainer.className = 'red';
		if (isTwoWaves) {
			startStopwatch(countdownTime, false);
			waveDiv.innerText = startingWave === 'AB' ? 'CD' : 'AB';
			startingWave = startingWave === 'AB' ? 'CD' : 'AB';
			socket.emit('stopwatch-stopped', stopwatchId, true);
		} else {
			clearInterval(intervalID);
			timeDiv.innerText = '-';

			whistleSound.play();
			let whistleSoundPlayed: number = 1;
			whistleSound.addEventListener('ended', () => {
				if (whistleSoundPlayed === 1 || whistleSoundPlayed === 2) {
					whistleSound.play();
					whistleSoundPlayed++;
				}
			});

			socket.emit('stopwatch-stopped', stopwatchId, false);
		}
	}

	function countdown(id: string, start: number, whenCountdownFinish: () => void): void {
		clearInterval(intervalID);

		const counter = document.getElementById(id) as HTMLDivElement;
		let count: number = start;
		counter.innerText = String(count);

		if (stopwatchContainer.className === 'green' && count <= 30) {
			stopwatchContainer.className = 'yellow';
		}

		intervalID = setInterval(() => {
			count -= 1;
			counter.innerText = String(count);
			if (count === 0) {
				whenCountdownFinish();
			} else if (stopwatchContainer.className === 'green' && count <= 30) {
				stopwatchContainer.className = 'yellow';
			}
		}, 1000);
	}

	const stopwatchContainer = document.getElementById('stopwatch') as HTMLDivElement;
	const waveDiv = document.getElementById('wave') as HTMLDivElement;
	const timeDiv = document.getElementById('time') as HTMLDivElement;
	const stopwatchIdDiv = document.getElementById('stopwatch-id') as HTMLDivElement;
	const qrcodeCanvas = document.getElementById('qrcode') as HTMLCanvasElement;

	const socket = io(import.meta.env.PUBLIC_WEBSOCKET_SERVER);
	let stopwatchId: string;
	let isTwoWaves: boolean = false;
	let countdownTime: number;
	let intervalID: number | NodeJS.Timer;
	let startingWave: 'AB' | 'CD' = 'AB';

	const whistleSound = new Audio('whistle.wav');

	timeDiv.hidden = true;
	waveDiv.hidden = true;

	socket.on('connect', () => {
		socket.emit('stopwatch-connected');
		if (!stopwatchId) {
			stopwatchId = socket.id;
			stopwatchIdDiv.innerText = stopwatchId;
			toCanvas(qrcodeCanvas, `${location.protocol}//${location.host}/controller/${stopwatchId}`, {
				scale: 12,
			});
		}
	});

	socket.on('start-stopwatch', (startingStopwatchId: string, twoWaves: boolean, time: number) => {
		if (startingStopwatchId === stopwatchId) {
			if (!twoWaves) {
				startingWave = 'AB';
			}
			startStopwatch(time, twoWaves);
			socket.emit('stopwatch-started', stopwatchId);
		}
	});

	socket.on('stop-stopwatch', (stoppingStopwatchId: string) => {
		if (stoppingStopwatchId === stopwatchId) {
			stopStopwatch();
		}
	});

	socket.on('controller-connected', (connectingStopwatchId: string) => {
		if (connectingStopwatchId === stopwatchId) {
			document.documentElement.requestFullscreen();
			stopwatchContainer.className = 'red';

			timeDiv.hidden = false;
			waveDiv.hidden = false;

			stopwatchIdDiv.hidden = true;
			qrcodeCanvas.hidden = true;

			const titleElement = document.getElementById('title') as HTMLHeadingElement;
			titleElement.innerText = '';
			titleElement.id = '';
		}
	});
</script>
